<div class="container-app">
  <div class="locator__sidebar">
    <div class="locator__panel panel panel-default">
      <div class="panel-heading clearfix"><h1>Polling Locator</h1></div>
      
      <div class="panel-body">
        <form class="form-inline locator__form">
          <div class="form-group">
            <label for="address">Home Address</label>
            <div class="searchbox">
              <input type="address" id="address" class="form-control" placeholder="Enter full registered voting address" required="true" disabled="true">
              <button type="submit" class="btn btn-secondary"><span class="glyphicon glyphicon-search"></span></button>
            </div>
          </div>
        </form>
        
        <div class="alert alert-info hidden mt1 mb0" id="error"></div>
      </div>
      
      <div class="locator__results list-group">
      
        <!-- <div class="locator__home-address list-group-item hidden">
        
          <div class="locator__heading"><h4>Your Address</h4></div>
          
          <div class="locator__address"></div>
        
        </div> -->
        
        <div class="locator__early-vote-sites list-group-item hidden">
          <div class="locator__heading" data-toggle="collapse" data-target="#early-vote-sites-body" aria-expanded="false" aria-controls="early-vote-sites-body"><h4>Your Early Vote Site</h4> <div class="expand-button"><span class="glyphicon glyphicon-chevron-down pull-right"></span></div></div>
          
          <div class="locator__body collapse in" id="early-vote-sites-body">
          
            <div class="locator__address">
            </div>
            
            <div class="locator__hours">
            </div>
          </div>
        </div>
        
        <div class="locator__drop-off-locations list-group-item hidden">
          <div class="locator__heading" data-toggle="collapse" data-target="#drop-off-locations-body" aria-expanded="false" aria-controls="drop-off-locations-body"><h4>Your Drop-off Locations</h4> <div class="expand-button"><span class="glyphicon glyphicon-chevron-down pull-right"></span></div></div>
          
          <div class="locator__body collapse in" id="drop-off-locations-body">
          
            <div class="locator__address">
            </div>
            
            <div class="locator__hours">
            </div>
          </div>
        </div>
        
        <div class="locator__polling-location list-group-item hidden">
          <div class="locator__heading" data-toggle="collapse" data-target="#polling-location-body" aria-expanded="false" aria-controls="polling-location-body"><h4>Your Election Day Polling Place</h4> <div class="expand-button"><span class="glyphicon glyphicon-chevron-down pull-right"></span></div></div>
          
          <div class="locator__body collapse in" id="polling-location-body">
          
            <div class="locator__address">
            </div>
            
            <div class="locator__hours">
            </div>
          </div>
        </div>
      </div>
    </div>
  </div> 

  <div class="locator__map" id="map"></div>
  <div id="mobile-indicator"></div>
</div>


<script>
  var map, geocoder, placeSearch, autocomplete, dropOff, earlyVote, electionDay;
  
  function lookup(address, callback) {
    gapi.client.setApiKey('AIzaSyCZZ7J677vfKE-ujd39o3ub3Vrpu8XEC3E');
    
    var electionId = 5000;
    
    var req = gapi.client.request({
        'path' : '/civicinfo/v2/voterinfo',
        'params' : {'electionId' : electionId, 'address' : address, 'officialOnly': false}
    });
    req.execute(callback);
  }

  function renderResults(response, rawReponse) {    
    var results = [], pollingAddress, primarySite;
        
    clearErrors();
    
    if (!response || response.error) {
      
      renderError("We don't have polling information for that location yet. Please contact your state elections board, or check back later.");
      
    } else {
      
      var normalizedAddress = response.normalizedInput.line1 + ' ' +
          response.normalizedInput.city + ', ' +
          response.normalizedInput.state + ' ' +
          response.normalizedInput.zip;
      
      if (response.dropOffLocations) {
        
        primarySite = response.dropOffLocations[0].address;
        dropOff = response.dropOffLocations[0].address;
        
      } else if (response.earlyVoteSites) {
        
        primarySite = response.earlyVoteSites[0].address;
        earlyVote = response.earlyVoteSites[0].address;
        
      } else if (response.pollingLocations) {
        
        primarySite = response.pollingLocations[0].address;
        electionDay = response.pollingLocations[0].address;
        
      } else {
        primarySite = null;
      }
      
      if (primarySite) {
        mapAddress = primarySite.line1 + ' ' +
          primarySite.city + ', ' +
          primarySite.state + ' ' +
          primarySite.zip;

        codeAdress(mapAddress);
        updateData(response, normalizedAddress);
      } else {
        
        if (response.state) {
          if (response.state[0].electionAdministrationBody) {
            if (response.state[0].electionAdministrationBody.electionInfoUrl) {
              if (response.mailOnly) {
                renderError("The registered address you entered is located in a mail-in voting state. This means you can submit your ballot at any official drop box. Contact your <a href='" + response.state[0].electionAdministrationBody.electionInfoUrl +"' target='_blank'>state elections board</a> for more information.");
              } else {
                renderError("We don't have polling information for that location yet. Please contact your <a href='" + response.state[0].electionAdministrationBody.electionInfoUrl +"' target='_blank'>state elections board</a>, or check back later.");
              }
              
              return;
            }
          }
          
          renderError("We don't have polling information for that location yet. Please contact your state elections board, or check back later.");
          
        } else {
          renderError("We don't have polling information for that location yet. Please contact your state elections board, or check back later.");
        }     
      }
    }
  }
  
  function initMap(center) {
    $(window).resize(function () {
      google.maps.event.trigger(map,'resize');
      if (isMobileWidth()) {
        mobileMap();
      } else {
        desktopMap();
      }
    })
     
    var mapOptions = {
      zoom: 15,
      center: center
    }
    map = new google.maps.Map(document.getElementById('map'), mapOptions);
    
    var marker = new google.maps.Marker({
        map: map,
        position: center
    });
    
    if (isMobileWidth()) {
      mobileMap();
    } else {
      desktopMap();
    }
  }
  
  function isMobileWidth() {
    return $('#mobile-indicator').is(':visible');
  }
  
  function codeAdress(address) {
    var geocoder = new google.maps.Geocoder();
    geocoder.geocode( { 'address': address}, function(results, status) {
      if (status == 'OK') {
        initMap(results[0].geometry.location);
      } else {
        renderError("We don't have polling information for that location yet. Please contact your state elections board, or check back later.");
      }
    });
  }
  
  function collapse() {
    $('.list-group-item').not('.hidden').find('.locator__body').css('height','auto');
    $('.list-group-item').not('.hidden').find('.locator__heading').first().addClass('active');
    $('.list-group-item').not('.hidden').find('.locator__heading').removeClass('collapsed');
    $('.list-group-item').not('.hidden').find('.locator__body').slice(1).removeClass('in');
    $('.list-group-item').not('.hidden').find('.locator__heading').slice(1).addClass('collapsed');
  }
  
  function clearResults() {
    dropOff = null;
    earlyVote = null;
    electionDay = null;
    
    $('.locator__address').html('');
    
    $('.locator__drop-off-locations').addClass('hidden');
    $('.locator__early-vote-sites').addClass('hidden');
    $('.locator__polling-location').addClass('hidden');
    
    $('.locator__body').addClass('in');
  }
  
  function clearErrors() {
    $('#error').addClass('hidden');
  }
    
  function updateData(response, homeAddress) {
    var data;
    
    clearResults();
    
    $('.locator__home-address .locator__address').html("<p>" + homeAddress + "</p>");
    $('.locator__home-address').removeClass("hidden");
    
    if (response.dropOffLocations) {
      data = response.dropOffLocations[0];
      $('.locator__drop-off-locations .locator__address').html('');
      
      for (var key in data.address) {
        if (data.address.hasOwnProperty(key)) {
          $('.locator__drop-off-locations .locator__address').append('<span class="' + key + '"> ' + data.address[key]);
        }
      }
      
      if(data.pollingHours) {
        var pollingHours = data.pollingHours;

        $('.locator__drop-off-locations .locator__hours').html("<h4>Hours:</h4></p>" + pollingHours + "</p>");
      }
      
      $('.locator__drop-off-locations').data('address',data.address);
      $('.locator__drop-off-locations').removeClass('hidden');
    }
    if (response.earlyVoteSites) {
      data = response.earlyVoteSites[0];
      $('.locator__early-vote-sites .locator__address').html('')
      
      for (var key in data.address) {
        if (data.address.hasOwnProperty(key)) {
          $('.locator__early-vote-sites .locator__address').append('<span class="' + key + '"> ' + data.address[key]);
        }
      }
      
      if(data.pollingHours) {
        var pollingHours = data.pollingHours;

        $('.locator__early-vote-sites .locator__hours').html("<h4>Hours:</h4></p>" + pollingHours + "</p>");
      }
      
      $('.locator__early-vote-sites').data('address',data.address);
      $('.locator__early-vote-sites').removeClass('hidden');
    }
    
    if (response.pollingLocations) {
      data = response.pollingLocations[0];
      $('.locator__polling-location .locator__address').html('');
      
      for (var key in data.address) {
        if (data.address.hasOwnProperty(key)) {
          $('.locator__polling-location .locator__address').append('<span class="' + key + '"> ' + data.address[key]);
        }
      }
      
      if(data.pollingHours) {
        var pollingHours = data.pollingHours;

        $('.locator__polling-location .locator__hours').html("<h4>Hours:</h4></p>" + pollingHours + "</p>");
      }

      $('.locator__polling-location').data('address',data.address);
      $('.locator__polling-location').removeClass('hidden');
    }
    
    collapse();
  }
  
  function renderError(message) {
    $('#error').html(message);
    $('#error').removeClass('hidden');
  }
  
  function mobileMap() {    
    // Move map on mobile
    $('.list-group-item').not('.hidden').find('.locator__body').first().after($('#map'));
    google.maps.event.trigger(map,'resize');
  }
  
  function desktopMap() {
    // Move map on desktop
    $('.container-app').append($('#map'));
    google.maps.event.trigger(map,'resize');
  }
  
  function initAutocomplete() {
    autocomplete = new google.maps.places.Autocomplete(
        /** @type {!HTMLInputElement} */(document.getElementById('address')),
        {
          types: ['geocode'],
          componentRestrictions: {country: "us"}
        });
        
    google.maps.event.addListener(autocomplete, 'place_changed', function() {
      $('form').submit();
    });
  }
  
  function addListeners() {
    $('.locator__heading').on('click', function() {
      $('.locator__heading').not(this).parent().find('.locator__body').collapse("hide");
      $('.locator__heading').removeClass('active');
      $(this).addClass('active');
      
      var address = $(this).parent().data('address');
      
      var normalizedAddress = address.line1 + ' ' +
          address.city + ', ' +
          address.state + ' ' +
          address.zip;
          
      codeAdress(normalizedAddress);
    })
  }
  
  $(document).ready(function() {
    $('#address').prop('disabled', false);
    
    initAutocomplete();
    addListeners();
    
    $('form').on('submit', function(e) {
      e.preventDefault();
      collapse();
      
      var addressInput = $('#address').val();
      
      if (addressInput.length > 0) {      
        lookup(addressInput, renderResults);
      } else {
        renderError('Please input a valid address.');
      }
    })
  });
</script>

<script src="https://apis.google.com/js/client.js"></script>
<script async defer
    src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAVOeLs_sV8HAU6DqhinyZ6LPpr4YJi4Vs&libraries=places">
    </script>
    
